#
# Calc.ypj
# 
# js-YYParser input grammar example.
#
# This file is PUBLIC DOMAIN 
#
#

%left   ','
%left   '-' '+'
%left   '*' '/'
%left   '^'
%left   NEG

#Grammar rules
%%
input:  #empty
        |   input statement 
;

statement :  ';'				{  }
		|   exp ';'             { _output($_[1].value) }
;

exp:        NUM					{ return $_[1].value  }	
		|   STR					{ return $_[1].value.slice(1,-1)  }	
		|   REG					{ return $_[1].value  }	
        |   exp '+' exp         { return $_[1].value + $_[3].value }
        |   exp '-' exp         { return $_[1].value - $_[3].value }
        |   exp '*' exp         { return $_[1].value * $_[3].value }
		|	exp '^' exp			{ return Math.pow($_[1].value, $_[3].value)}
		|   exp '/' exp         {
								  if($_[3].value == 0){
									$_[0].Error('divided by zero.',false);
								  }
                                  return $_[1].value / $_[3].value
                                 }
        |   '-' exp %prec NEG   { return -$_[2].value }
		|   exp ',' exp         { return $_[3].value }
        |   '(' exp ')'         { return $_[2].value }
;
%%

#Lexical definitions 
#Num 数值、STR字符串、REG正则表达式（用来测试与除法的兼容）
{%
NUM:	/^([0-9]+(?:\.[0-9]+)?)/g	{parseFloat}
STR:	/^\"([^\"\\]|(\\.))*\"/g
REG:	%expect%	/^\/([^\/\\]|(\\.))*\//g
%}
